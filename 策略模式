#include<iomanip>
using namespace std;
class MyClassHash
{
public:
	size_t operator()(const string s)const
	{
		return hash<string>()(s);
	}
};
class TypeNumber
{
private:
	unordered_map<string, size_t>_data;
public:
	
	TypeNumber(string *ss,int size)
	{
		for(int i=0;i<size;++i)
		{
			_data.emplace(pair<string,size_t>(ss[i],MyClassHash()(ss[i])));
		}
	}
	size_t operator[](string s)
	{
		return _data[s];
	}
	size_t HashNum(string s)
	{
		return _data[s];
	}
	int size()
	{
		return _data.size();
	}
};
class CashSuper//抽象基类
{
public:
	virtual double acceptCash(double money) = 0;
};
class CashNormal:public CashSuper//正常收费
{
public:
	double acceptCash(double money)override
	{
		return money;
	}
};
class CashRebate :public CashSuper//打折收费
{
private:
	double moneyRebate = 1;
public:
	CashRebate(string moneyRebate)
	{
		double mr = stod(moneyRebate);
		this->moneyRebate = mr;
	}
	double acceptCash(double money)override
	{
		return money * moneyRebate;
	}

};
class CashReturn :public CashSuper//返利收费
{
private:
	double moneyCondition = 0.0;
	double moneyReturn = 0.0;
public:
	CashReturn(string moneyCondition,string moneyReturn)
	{
		double mc = stod(moneyCondition);
		double mr = stod(moneyReturn);
		this->moneyCondition = mc;
		this->moneyReturn = mr;
	}
	double acceptCash(double money)override
	{
		double result = money;
		if (money >= moneyCondition)
		{
			result = money - floor(money / moneyCondition) * moneyReturn;
		}
		return result;
	}
};

class CashContext
{
	CashSuper* cs = nullptr;
public:
	CashContext(TypeNumber& tn, string* ss, string type)
	{
		
		size_t x = tn[type];
		switch (x)
		{
		case 6936570975527348588:
		{
			CashNormal* cs0 = new CashNormal;
			cs = cs0;
			break;
		}
		case 12395886549588576045:
		{
			CashReturn* cs1 = new CashReturn("300", "100");
			cs = cs1;
			break;
		}
		case 13234659033657633829:
			CashRebate* cs2 = new CashRebate("0.8");
			cs = cs2;
			break;
		}
	}
	double GetResult(double money)
	{
		return cs->acceptCash(money);
	}
	
};
int main()
{

	//cout << setiosflags(ios::fixed) << setprecision(2);
	//ostringstream myos;
	//double i = 12.01;
	//cout << i << endl;
	//myos << i;
	//string s = myos.str();
	//cout << i << endl;
	//int 转换string

	//cout << setiosflags(ios::fixed) << setprecision(3);
	//string str_double = "21.012";
	//double i_str = stod(str_double);
	//cout << i_str << endl;
	//string 转换成double

	//string s1 = "32.123";
	//istringstream myis(s1);
	//double x;
	//myis >> x;
	//cout << x << endl;
	//string转换成double

	string ss[3] = { "正常收费","满300返100","打8折" };
	TypeNumber tn(ss, 3);

	CashContext *csuper = new CashContext(tn, ss, "满300返100");
	double totalPrices = 0;
	totalPrices = csuper->GetResult(300 * 100);
	int total = 0;
	total = total + totalPrices;
	cout << total << endl;
}
